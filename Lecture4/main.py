print('Lambda:')
def calc1(a):
    return a+a
def calc2(a):
    return a*a
def math(op, x):
    print(op(x))
math(calc1, 5)
math(calc2, 5)
# -----------------------------------
calc1 = lambda a: a+a
def calc2(a):
    return a*a
def math(op, x):
    print(op(x))

math(calc1, 5)
math(lambda a: a*a, 5)
# 1. В списке хранятся числа. Нужно выбрать только чётные числа и составить список пар
# (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]
print('Решение 1:')
data = [1, 2, 3, 5, 8, 15, 23, 38]
res = list()
for i in data:
    if i % 2 == 0:
        res.append((i, i ** 2))
print(res)
print('Решение 2:')
def select(f, col):
    return [f(x) for x in col]
def where(f, col):
    return [x for x in col if f(x)]
data = [1, 2, 3, 5, 8, 15, 23, 38]
res = select(int, data)
print(res)
res = where(lambda x: x % 2 == 0, res)
print(res)
res = list(select(lambda x: (x, x ** 2), res))
print(res)

print('Функция MAP:')
print('Пример 1:')
list_1 = [x*x for x in range(1,11) if x % 2 == 0]
print(list_1)
list_1 = list(map(lambda x: x+ 10, list_1))
print(list_1)
print('Пример 2:')
# Задача: C клавиатуры вводится некий набор чисел, в качестве разделителя используется
# пробел. Этот набор чисел будет считан в качестве строки. Как превратить list строк в list чисел?
data = '23 65 16 78 37 24 90 62'
data = list(map(int, data.split()))
print(data)
print('Функция FILTER:')
print('Пример 1:')
data = [1, 2, 3, 5, 8, 15, 23, 36]
res = list(filter(lambda x: x % 3 == 0, data))
print(res)
# Файлы в текстовом формате используются для:
# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий
# Что нужно для работы с файлами:
# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом.

# Файлы
# Варианты режима (мод):
# a – открытие для добавления данных.
# ○ Позволяет дописывать что-то в имеющийся файл.
# ○ Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан
# и в него начнется запись.
# r – открытие для чтения данных.
# ○ Позволяет читать данные из файла.
# ○ Если вы попробуете считать данные из файла, которого не существует, программа
# выдаст ошибку.
# w – открытие для записи данных.
# ○ Позволяет записывать данные и создавать файл, если его не существует.

# Файлы
# Миксованные режимы:
# 1. w+
# ○ Позволяет открывать файл для записи и читать из него.
# ○ Если файла не существует, он будет создан.
# 2. r+
# ○ Позволяет открывать файл для чтения и дописывать в него.
# ○ Если файла не существует, программа выдаст ошибку.
# Файлы
# Примеры использования различных режимов в коде:
# 1. Режим a
#  colors = ['red', 'green', 'blue']
#  data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
#  data.writelines(colors) # разделителей не будет
#  data.close()
# ● data.close() — используется для закрытия файла, чтобы разорвать подключение файловой
# переменной с файлом на диске.
# ● exit() — позволяет не выполнять код, прописанный после этой команды в скрипте.
# ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
# ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление в
# существующий файл, а не перезапись файлов.

# Файлы
# Ещё один способ записи данных в файл:
# with open('file.txt', 'w') as data:
#  data.write('line 1\n')
#  data.write('line 2\n')
# 2. Режим r
# ● Чтение данных из файла:
#  path = 'file.txt'
#  data = open(path, 'r')
#  for line in data:
#  print(line)
#  data.close()

# Файлы
# 3. Режим w
#  colors = ['red', 'green', 'blue']
#  data = open('file.txt', 'w')
#  data.writelines(colors) # разделителей не будет
# data.close()
# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.

